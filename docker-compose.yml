services:
  # PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sales-tracker-app
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
      - storage_data:/var/www/storage
    networks:
      - sales-tracker-network

  # Nginx Service
  nginx:
    image: nginx:alpine
    container_name: sales-tracker-nginx
    restart: unless-stopped
    ports:
      - "8000:80"
    volumes:
      - ./:/var/www
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
    networks:
      - sales-tracker-network
    depends_on:
      - app

  # MySQL Service
  db:
    image: mysql:8.0
    container_name: sales-tracker-db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-sales-tracker}
      MYSQL_ROOT_HOST: '%'
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-password}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    ports:
      - "3306:3306"
    volumes:
      - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
      - dbdata:/var/lib/mysql
    networks:
      - sales-tracker-network

  # Redis Service
  redis:
    image: redis:alpine
    container_name: sales-tracker-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    networks:
      - sales-tracker-network

  # Node.js Service for development
  node:
    image: node:18-alpine
    container_name: sales-tracker-node
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - /var/www/node_modules
    ports:
      - "5173:5173"
    command: npm run dev
    networks:
      - sales-tracker-network
    depends_on:
      - app

# Docker Networks
networks:
  sales-tracker-network:
    driver: bridge

# Volumes
volumes:
  dbdata:
    driver: local
  storage_data:
    driver: local 